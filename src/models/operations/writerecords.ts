/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of write operation. The only supported types currently are create and update.
 */
export const Type = {
  Create: "create",
  Update: "update",
} as const;
/**
 * The type of write operation. The only supported types currently are create and update.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * The mode of write operation. The only supported mode currently is synchronous.
 */
export const Mode = {
  Synchronous: "synchronous",
} as const;
/**
 * The mode of write operation. The only supported mode currently is synchronous.
 */
export type Mode = ClosedEnum<typeof Mode>;

export type Associations = {};

/**
 * Write request
 */
export type WriteRecordsWriteRequest = {
  /**
   * The ID of the user group whose SaaS instance you'd like to write data to. This is the ID that was provided during installation creation.
   */
  groupRef: string;
  /**
   * The type of write operation. The only supported types currently are create and update.
   */
  type: Type;
  /**
   * The mode of write operation. The only supported mode currently is synchronous.
   */
  mode?: Mode | undefined;
  /**
   * The record to write
   */
  record?: { [k: string]: any } | undefined;
  /**
   * To write associations to the record. Note: currently only HubSpot associations are supported
   */
  associations?: Array<Associations> | undefined;
};

export type WriteRecordsRequest = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  /**
   * Write request
   */
  requestBody: WriteRecordsWriteRequest;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type WriteRecordsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The data returned by the operation
 */
export type Data = {};

export type WriteResult = {
  /**
   * Whether the operation was successful
   */
  success: boolean;
  /**
   * The data returned by the operation
   */
  data?: Data | undefined;
  /**
   * The ID of the object
   */
  recordId?: string | undefined;
};

/**
 * The success response
 */
export type WriteRecordsSyncWriteResponseSuccess = {
  result: WriteResult;
  /**
   * The operation ID
   */
  operationId: string;
};

export type WriteRecordsResponse =
  | WriteRecordsSyncWriteResponseSuccess
  | WriteRecordsAPIProblem;

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const Associations$inboundSchema: z.ZodType<
  Associations,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Associations$Outbound = {};

/** @internal */
export const Associations$outboundSchema: z.ZodType<
  Associations$Outbound,
  z.ZodTypeDef,
  Associations
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Associations$ {
  /** @deprecated use `Associations$inboundSchema` instead. */
  export const inboundSchema = Associations$inboundSchema;
  /** @deprecated use `Associations$outboundSchema` instead. */
  export const outboundSchema = Associations$outboundSchema;
  /** @deprecated use `Associations$Outbound` instead. */
  export type Outbound = Associations$Outbound;
}

export function associationsToJSON(associations: Associations): string {
  return JSON.stringify(Associations$outboundSchema.parse(associations));
}

export function associationsFromJSON(
  jsonString: string,
): SafeParseResult<Associations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Associations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Associations' from JSON`,
  );
}

/** @internal */
export const WriteRecordsWriteRequest$inboundSchema: z.ZodType<
  WriteRecordsWriteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  type: Type$inboundSchema,
  mode: Mode$inboundSchema.optional(),
  record: z.record(z.any()).optional(),
  associations: z.array(z.lazy(() => Associations$inboundSchema)).optional(),
});

/** @internal */
export type WriteRecordsWriteRequest$Outbound = {
  groupRef: string;
  type: string;
  mode?: string | undefined;
  record?: { [k: string]: any } | undefined;
  associations?: Array<Associations$Outbound> | undefined;
};

/** @internal */
export const WriteRecordsWriteRequest$outboundSchema: z.ZodType<
  WriteRecordsWriteRequest$Outbound,
  z.ZodTypeDef,
  WriteRecordsWriteRequest
> = z.object({
  groupRef: z.string(),
  type: Type$outboundSchema,
  mode: Mode$outboundSchema.optional(),
  record: z.record(z.any()).optional(),
  associations: z.array(z.lazy(() => Associations$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsWriteRequest$ {
  /** @deprecated use `WriteRecordsWriteRequest$inboundSchema` instead. */
  export const inboundSchema = WriteRecordsWriteRequest$inboundSchema;
  /** @deprecated use `WriteRecordsWriteRequest$outboundSchema` instead. */
  export const outboundSchema = WriteRecordsWriteRequest$outboundSchema;
  /** @deprecated use `WriteRecordsWriteRequest$Outbound` instead. */
  export type Outbound = WriteRecordsWriteRequest$Outbound;
}

export function writeRecordsWriteRequestToJSON(
  writeRecordsWriteRequest: WriteRecordsWriteRequest,
): string {
  return JSON.stringify(
    WriteRecordsWriteRequest$outboundSchema.parse(writeRecordsWriteRequest),
  );
}

export function writeRecordsWriteRequestFromJSON(
  jsonString: string,
): SafeParseResult<WriteRecordsWriteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteRecordsWriteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteRecordsWriteRequest' from JSON`,
  );
}

/** @internal */
export const WriteRecordsRequest$inboundSchema: z.ZodType<
  WriteRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  RequestBody: z.lazy(() => WriteRecordsWriteRequest$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type WriteRecordsRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  RequestBody: WriteRecordsWriteRequest$Outbound;
};

/** @internal */
export const WriteRecordsRequest$outboundSchema: z.ZodType<
  WriteRecordsRequest$Outbound,
  z.ZodTypeDef,
  WriteRecordsRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  requestBody: z.lazy(() => WriteRecordsWriteRequest$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsRequest$ {
  /** @deprecated use `WriteRecordsRequest$inboundSchema` instead. */
  export const inboundSchema = WriteRecordsRequest$inboundSchema;
  /** @deprecated use `WriteRecordsRequest$outboundSchema` instead. */
  export const outboundSchema = WriteRecordsRequest$outboundSchema;
  /** @deprecated use `WriteRecordsRequest$Outbound` instead. */
  export type Outbound = WriteRecordsRequest$Outbound;
}

export function writeRecordsRequestToJSON(
  writeRecordsRequest: WriteRecordsRequest,
): string {
  return JSON.stringify(
    WriteRecordsRequest$outboundSchema.parse(writeRecordsRequest),
  );
}

export function writeRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<WriteRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteRecordsRequest' from JSON`,
  );
}

/** @internal */
export const WriteRecordsAPIProblem$inboundSchema: z.ZodType<
  WriteRecordsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type WriteRecordsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const WriteRecordsAPIProblem$outboundSchema: z.ZodType<
  WriteRecordsAPIProblem$Outbound,
  z.ZodTypeDef,
  WriteRecordsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsAPIProblem$ {
  /** @deprecated use `WriteRecordsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = WriteRecordsAPIProblem$inboundSchema;
  /** @deprecated use `WriteRecordsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = WriteRecordsAPIProblem$outboundSchema;
  /** @deprecated use `WriteRecordsAPIProblem$Outbound` instead. */
  export type Outbound = WriteRecordsAPIProblem$Outbound;
}

export function writeRecordsAPIProblemToJSON(
  writeRecordsAPIProblem: WriteRecordsAPIProblem,
): string {
  return JSON.stringify(
    WriteRecordsAPIProblem$outboundSchema.parse(writeRecordsAPIProblem),
  );
}

export function writeRecordsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<WriteRecordsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteRecordsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteRecordsAPIProblem' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const WriteResult$inboundSchema: z.ZodType<
  WriteResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => Data$inboundSchema).optional(),
  recordId: z.string().optional(),
});

/** @internal */
export type WriteResult$Outbound = {
  success: boolean;
  data?: Data$Outbound | undefined;
  recordId?: string | undefined;
};

/** @internal */
export const WriteResult$outboundSchema: z.ZodType<
  WriteResult$Outbound,
  z.ZodTypeDef,
  WriteResult
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => Data$outboundSchema).optional(),
  recordId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteResult$ {
  /** @deprecated use `WriteResult$inboundSchema` instead. */
  export const inboundSchema = WriteResult$inboundSchema;
  /** @deprecated use `WriteResult$outboundSchema` instead. */
  export const outboundSchema = WriteResult$outboundSchema;
  /** @deprecated use `WriteResult$Outbound` instead. */
  export type Outbound = WriteResult$Outbound;
}

export function writeResultToJSON(writeResult: WriteResult): string {
  return JSON.stringify(WriteResult$outboundSchema.parse(writeResult));
}

export function writeResultFromJSON(
  jsonString: string,
): SafeParseResult<WriteResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteResult' from JSON`,
  );
}

/** @internal */
export const WriteRecordsSyncWriteResponseSuccess$inboundSchema: z.ZodType<
  WriteRecordsSyncWriteResponseSuccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.lazy(() => WriteResult$inboundSchema),
  operationId: z.string(),
});

/** @internal */
export type WriteRecordsSyncWriteResponseSuccess$Outbound = {
  result: WriteResult$Outbound;
  operationId: string;
};

/** @internal */
export const WriteRecordsSyncWriteResponseSuccess$outboundSchema: z.ZodType<
  WriteRecordsSyncWriteResponseSuccess$Outbound,
  z.ZodTypeDef,
  WriteRecordsSyncWriteResponseSuccess
> = z.object({
  result: z.lazy(() => WriteResult$outboundSchema),
  operationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsSyncWriteResponseSuccess$ {
  /** @deprecated use `WriteRecordsSyncWriteResponseSuccess$inboundSchema` instead. */
  export const inboundSchema =
    WriteRecordsSyncWriteResponseSuccess$inboundSchema;
  /** @deprecated use `WriteRecordsSyncWriteResponseSuccess$outboundSchema` instead. */
  export const outboundSchema =
    WriteRecordsSyncWriteResponseSuccess$outboundSchema;
  /** @deprecated use `WriteRecordsSyncWriteResponseSuccess$Outbound` instead. */
  export type Outbound = WriteRecordsSyncWriteResponseSuccess$Outbound;
}

export function writeRecordsSyncWriteResponseSuccessToJSON(
  writeRecordsSyncWriteResponseSuccess: WriteRecordsSyncWriteResponseSuccess,
): string {
  return JSON.stringify(
    WriteRecordsSyncWriteResponseSuccess$outboundSchema.parse(
      writeRecordsSyncWriteResponseSuccess,
    ),
  );
}

export function writeRecordsSyncWriteResponseSuccessFromJSON(
  jsonString: string,
): SafeParseResult<WriteRecordsSyncWriteResponseSuccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WriteRecordsSyncWriteResponseSuccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteRecordsSyncWriteResponseSuccess' from JSON`,
  );
}

/** @internal */
export const WriteRecordsResponse$inboundSchema: z.ZodType<
  WriteRecordsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => WriteRecordsSyncWriteResponseSuccess$inboundSchema),
  z.lazy(() => WriteRecordsAPIProblem$inboundSchema),
]);

/** @internal */
export type WriteRecordsResponse$Outbound =
  | WriteRecordsSyncWriteResponseSuccess$Outbound
  | WriteRecordsAPIProblem$Outbound;

/** @internal */
export const WriteRecordsResponse$outboundSchema: z.ZodType<
  WriteRecordsResponse$Outbound,
  z.ZodTypeDef,
  WriteRecordsResponse
> = z.union([
  z.lazy(() => WriteRecordsSyncWriteResponseSuccess$outboundSchema),
  z.lazy(() => WriteRecordsAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsResponse$ {
  /** @deprecated use `WriteRecordsResponse$inboundSchema` instead. */
  export const inboundSchema = WriteRecordsResponse$inboundSchema;
  /** @deprecated use `WriteRecordsResponse$outboundSchema` instead. */
  export const outboundSchema = WriteRecordsResponse$outboundSchema;
  /** @deprecated use `WriteRecordsResponse$Outbound` instead. */
  export type Outbound = WriteRecordsResponse$Outbound;
}

export function writeRecordsResponseToJSON(
  writeRecordsResponse: WriteRecordsResponse,
): string {
  return JSON.stringify(
    WriteRecordsResponse$outboundSchema.parse(writeRecordsResponse),
  );
}

export function writeRecordsResponseFromJSON(
  jsonString: string,
): SafeParseResult<WriteRecordsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteRecordsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteRecordsResponse' from JSON`,
  );
}
