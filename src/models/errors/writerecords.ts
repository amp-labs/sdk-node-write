/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Errors = {
  /**
   * errors messages when some unexpected event happened, but write to provider was successful
   */
  message?: string | undefined;
};

/**
 * The data returned by the operation
 */
export type Data = {};

export type WriteResult = {
  /**
   * Whether the operation was successful
   */
  success: boolean;
  /**
   * The data returned by the operation
   */
  data?: Data | undefined;
  /**
   * The ID of the object
   */
  recordId?: string | undefined;
};

export type Warnings = {
  /**
   * errors messages when some unexpected event happened, but write to provider was successful
   */
  message?: string | undefined;
};

/**
 * Error encountered while creating records
 */
export type WriteRecordsSyncWriteResponseFailureData = {
  /**
   * Error messages resulted in failures
   */
  errors: Array<Errors>;
  result?: WriteResult | undefined;
  /**
   * Warnings messages when some unexpected event happened, but not blocking failures
   */
  warnings?: Array<Warnings> | undefined;
  /**
   * The operation ID
   */
  operationId: string;
};

/**
 * Error encountered while creating records
 */
export class WriteRecordsSyncWriteResponseFailure extends Error {
  /**
   * Error messages resulted in failures
   */
  errors: Array<Errors>;
  result?: WriteResult | undefined;
  /**
   * Warnings messages when some unexpected event happened, but not blocking failures
   */
  warnings?: Array<Warnings> | undefined;
  /**
   * The operation ID
   */
  operationId: string;

  /** The original data that was passed to this error instance. */
  data$: WriteRecordsSyncWriteResponseFailureData;

  constructor(err: WriteRecordsSyncWriteResponseFailureData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.errors = err.errors;
    if (err.result != null) this.result = err.result;
    if (err.warnings != null) this.warnings = err.warnings;
    this.operationId = err.operationId;

    this.name = "WriteRecordsSyncWriteResponseFailure";
  }
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    message: z.string().optional(),
  });

/** @internal */
export type Errors$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const WriteResult$inboundSchema: z.ZodType<
  WriteResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => Data$inboundSchema).optional(),
  recordId: z.string().optional(),
});

/** @internal */
export type WriteResult$Outbound = {
  success: boolean;
  data?: Data$Outbound | undefined;
  recordId?: string | undefined;
};

/** @internal */
export const WriteResult$outboundSchema: z.ZodType<
  WriteResult$Outbound,
  z.ZodTypeDef,
  WriteResult
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => Data$outboundSchema).optional(),
  recordId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteResult$ {
  /** @deprecated use `WriteResult$inboundSchema` instead. */
  export const inboundSchema = WriteResult$inboundSchema;
  /** @deprecated use `WriteResult$outboundSchema` instead. */
  export const outboundSchema = WriteResult$outboundSchema;
  /** @deprecated use `WriteResult$Outbound` instead. */
  export type Outbound = WriteResult$Outbound;
}

export function writeResultToJSON(writeResult: WriteResult): string {
  return JSON.stringify(WriteResult$outboundSchema.parse(writeResult));
}

export function writeResultFromJSON(
  jsonString: string,
): SafeParseResult<WriteResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteResult' from JSON`,
  );
}

/** @internal */
export const Warnings$inboundSchema: z.ZodType<
  Warnings,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type Warnings$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const Warnings$outboundSchema: z.ZodType<
  Warnings$Outbound,
  z.ZodTypeDef,
  Warnings
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Warnings$ {
  /** @deprecated use `Warnings$inboundSchema` instead. */
  export const inboundSchema = Warnings$inboundSchema;
  /** @deprecated use `Warnings$outboundSchema` instead. */
  export const outboundSchema = Warnings$outboundSchema;
  /** @deprecated use `Warnings$Outbound` instead. */
  export type Outbound = Warnings$Outbound;
}

export function warningsToJSON(warnings: Warnings): string {
  return JSON.stringify(Warnings$outboundSchema.parse(warnings));
}

export function warningsFromJSON(
  jsonString: string,
): SafeParseResult<Warnings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Warnings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Warnings' from JSON`,
  );
}

/** @internal */
export const WriteRecordsSyncWriteResponseFailure$inboundSchema: z.ZodType<
  WriteRecordsSyncWriteResponseFailure,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => Errors$inboundSchema)),
  result: z.lazy(() => WriteResult$inboundSchema).optional(),
  warnings: z.array(z.lazy(() => Warnings$inboundSchema)).optional(),
  operationId: z.string(),
})
  .transform((v) => {
    return new WriteRecordsSyncWriteResponseFailure(v);
  });

/** @internal */
export type WriteRecordsSyncWriteResponseFailure$Outbound = {
  errors: Array<Errors$Outbound>;
  result?: WriteResult$Outbound | undefined;
  warnings?: Array<Warnings$Outbound> | undefined;
  operationId: string;
};

/** @internal */
export const WriteRecordsSyncWriteResponseFailure$outboundSchema: z.ZodType<
  WriteRecordsSyncWriteResponseFailure$Outbound,
  z.ZodTypeDef,
  WriteRecordsSyncWriteResponseFailure
> = z.instanceof(WriteRecordsSyncWriteResponseFailure)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.array(z.lazy(() => Errors$outboundSchema)),
    result: z.lazy(() => WriteResult$outboundSchema).optional(),
    warnings: z.array(z.lazy(() => Warnings$outboundSchema)).optional(),
    operationId: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsSyncWriteResponseFailure$ {
  /** @deprecated use `WriteRecordsSyncWriteResponseFailure$inboundSchema` instead. */
  export const inboundSchema =
    WriteRecordsSyncWriteResponseFailure$inboundSchema;
  /** @deprecated use `WriteRecordsSyncWriteResponseFailure$outboundSchema` instead. */
  export const outboundSchema =
    WriteRecordsSyncWriteResponseFailure$outboundSchema;
  /** @deprecated use `WriteRecordsSyncWriteResponseFailure$Outbound` instead. */
  export type Outbound = WriteRecordsSyncWriteResponseFailure$Outbound;
}
